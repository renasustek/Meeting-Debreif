// API Configuration
export const TRANSCRIPTION_API_URL = 'https://4c97209faf87.ngrok-free.app/transcribe';
export const GEMINI_API_KEY = 'AIzaSyBKbb9USQUCocF290NjwZUcetxjKryzCEg';
export const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';

// Transcription API
export const transcribeAudio = async (file) => {
  const formData = new FormData();
  formData.append('audio', file);
  
  console.log(`Starting transcription of file: ${file.name}`);
  
  const response = await fetch(TRANSCRIPTION_API_URL, {
    method: 'POST',
    body: formData,
    headers: {
      'ngrok-skip-browser-warning': 'true'
    }
  });
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Unknown error occurred' }));
    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
  }
  
  const data = await response.json();
  
  if (data.error) {
    throw new Error(data.error);
  }
  
  console.log('Transcription complete.');
  return data.transcript || 'No transcript received';
};

// Gemini AI API
export const generateSummary = async (transcript) => {
  const prompt = `You are a professional meeting summarizer. Please analyze the following meeting transcript and provide:

1. A concise summary of the key points discussed
2. A clear list of action items that need to be completed

Please format your response as a JSON object with two keys:
- "summary": A string containing the summary
- "actionItems": An array of strings, each representing one action item

Meeting transcript:
${transcript}`;

  const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        responseMimeType: "application/json"
      }
    })
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Unknown error occurred' }));
    throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);
  }

  const data = await response.json();
  console.log('Gemini response:', data);

  if (data.error) {
    throw new Error(data.error.message || 'Failed to generate summary');
  }

  // Extract the generated content
  const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
  if (!generatedText) {
    throw new Error('No content generated by Gemini');
  }

  // Parse the JSON response
  const summaryData = JSON.parse(generatedText);
  
  console.log('Summary generation complete.');
  return {
    summary: summaryData.summary || '',
    actionItems: summaryData.actionItems || []
  };
};

// Email API (simulated for now)
export const sendEmail = async (emails, summary, actionItems) => {
  // Create email content
  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  const subject = `Meeting Debrief: ${currentDate}`;
  const emailContent = `
Meeting Summary:
${summary}

Action Items:
${actionItems.map((item, index) => `${index + 1}. ${item}`).join('\n')}

---
This email was automatically generated from the meeting transcript.
  `.trim();

  console.log('Sending email to:', emails);
  console.log('Subject:', subject);
  console.log('Content:', emailContent);

  // Simulate API call
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // In a real implementation, you would make an API call here:
  /*
  const response = await fetch('/api/send-email', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      to: emails,
      subject: subject,
      content: emailContent
    })
  });
  
  if (!response.ok) {
    throw new Error('Failed to send email');
  }
  */
  
  return { success: true };
};
